"use client";

import React, { useEffect, useRef } from "react";
import Matter from "matter-js";
import { container } from "../style.css";

const MatterCanvas = ({ canvasRef }) => {
  const reactangle = "m.26,274.72c-1.79-20.16,5.77-40.86,22.2-55.17L256.07,16.09c27.25-23.73,68.58-20.88,92.31,6.37,23.73,27.25,20.88,68.58-6.37,92.31l-233.61,203.46c-27.25,23.73-68.58,20.88-92.31-6.37-9.42-10.82-14.66-23.86-15.83-37.14Z";
  const curved = "m341.46,31.89c14.51,28.65,3.05,63.65-25.6,78.16-3.42,1.73-34.78,17.16-83.49,26.15-28.57,5.27-57.68,7.34-86.51,6.14-36.13-1.5-71.89-8.14-106.28-19.74C9.15,112.33-7.2,79.34,3.07,48.9,13.33,18.47,46.33,2.12,76.77,12.39c101.89,34.37,185.72-5.68,186.54-6.1,28.65-14.51,63.65-3.05,78.16,25.6Z";
  const F_alphabet = "M14.68 77.392C14.424 78.672 13.656 79.7813 12.376 80.72C11.1813 81.5733 9.47467 82 7.256 82C5.37867 82 3.88533 81.488 2.776 80.464C1.752 79.44 1.19733 78.3733 1.112 77.264C1.624 73.68 1.88 68.304 1.88 61.136C1.88 56.8693 1.624 50.2987 1.112 41.424C0.514667 33.0613 0.216001 25.6373 0.216001 19.152C0.216001 15.6533 0.386667 12.0693 0.728001 8.39999C0.728001 7.20533 1.41067 5.92533 2.776 4.56C4.22667 3.19466 6.18933 2.34133 8.664 2C16.7707 1.14666 26.712 0.719994 38.488 0.719994H42.584C45.656 0.719994 48.6427 1.27466 51.544 2.384C54.5307 3.49333 56.024 5.41333 56.024 8.144C56.024 9.93599 55.5973 11.344 54.744 12.368C53.8907 13.392 52.312 13.904 50.008 13.904C48.8987 13.904 47.6187 13.8187 46.168 13.648C44.7173 13.4773 43.6933 13.3493 43.096 13.264C39.8533 12.752 37.336 12.496 35.544 12.496C25.6453 12.496 18.1787 13.1787 13.144 14.544C13.144 17.36 13.2293 21.9253 13.4 28.24L13.528 36.432C17.9653 36.432 21.9333 36.2613 25.432 35.92C28.9307 35.4933 30.936 35.2373 31.448 35.152C35.8853 34.64 38.8293 34.384 40.28 34.384C42.328 34.384 44.0347 34.8533 45.4 35.792C46.8507 36.6453 47.576 38.0107 47.576 39.888C47.576 44.1547 44.5893 46.288 38.616 46.288C37.1653 46.288 35.8853 46.3307 34.776 46.416C33.6667 46.5013 32.728 46.5867 31.96 46.672C28.888 47.0133 26.456 47.184 24.664 47.184C20.7387 47.184 17.4107 47.312 14.68 47.568C14.68 50.7253 14.808 54.0533 15.064 57.552C15.064 58.6613 15.1067 60.368 15.192 62.672C15.3627 64.976 15.448 67.0667 15.448 68.944C15.448 70.5653 15.4053 72.0587 15.32 73.424C15.2347 74.7893 15.0213 76.112 14.68 77.392Z";
  const R_alphabet = "M41.688 48.08C44.6747 53.1147 47.6613 57.5947 50.648 61.52C53.72 65.36 57.7307 70.096 62.68 75.728C63.2773 76.3253 63.576 77.008 63.576 77.776C63.576 78.9707 62.8933 79.9947 61.528 80.848C60.248 81.7013 58.6693 82.128 56.792 82.128C54.1467 82.128 51.288 81.0187 48.216 78.8C45.4853 76.8373 43.0533 74.2347 40.92 70.992C38.7867 67.7493 36.312 63.5253 33.496 58.32C31.2773 54.3093 29.9547 51.9627 29.528 51.28C26.2 52.6453 20.9947 53.4987 13.912 53.84C13.912 56.7413 14.168 60.6667 14.68 65.616C15.192 70.736 15.448 74.448 15.448 76.752C15.448 78.288 14.68 79.568 13.144 80.592C11.6933 81.616 10.0293 82.128 8.152 82.128C5.93333 82.128 4.22667 81.232 3.032 79.44C1.83733 77.0507 1.06933 74.192 0.728001 70.864C0.386667 67.536 0.216001 63.568 0.216001 58.96C0.216001 54.096 0.514667 48.592 1.112 42.448C1.624 35.6213 1.88 30.5867 1.88 27.344C1.88 24.6987 1.624 21.1573 1.112 16.72C1.02667 15.952 0.898667 14.6293 0.728001 12.752C0.557334 10.8747 0.472 9.168 0.472 7.632C0.472 6.43733 0.898667 5.41333 1.752 4.56C2.69067 3.62133 3.672 2.98133 4.696 2.64C11.608 1.53067 18.3493 0.975998 24.92 0.975998C36.0987 0.975998 45.3573 3.06666 52.696 7.24799C60.0347 11.4293 63.704 17.7867 63.704 26.32C63.704 28.9653 63.1067 31.5253 61.912 34C60.8027 36.3893 59.2667 38.3947 57.304 40.016C52.0987 44.0267 46.8933 46.7147 41.688 48.08ZM50.264 25.936C50.264 21.84 48.088 18.512 43.736 15.952C39.384 13.3067 33.1973 11.984 25.176 11.984C21.592 11.984 18.0507 12.4107 14.552 13.264L14.68 19.792C14.68 23.5467 14.552 27.216 14.296 30.8C14.04 34.384 13.912 38.224 13.912 42.32C15.3627 41.9787 16.8987 41.7653 18.52 41.68C20.1413 41.5093 21.208 41.3813 21.72 41.296C25.4747 40.9547 28.376 40.528 30.424 40.016C34.264 38.8213 37.4213 37.7547 39.896 36.816C42.456 35.792 44.8027 34.384 46.936 32.592C49.1547 30.7147 50.264 28.496 50.264 25.936Z";
  const O_alphabet = "M38.416 0.591995C44.1333 0.591995 49.3387 1.31733 54.032 2.768C58.7253 4.13333 62.5653 6.18133 65.552 8.91199C70.928 13.776 74.6827 19.1093 76.816 24.912C79.0347 30.6293 80.144 37.968 80.144 46.928C80.144 48.8053 79.888 50.512 79.376 52.048C78.9493 53.584 78.224 55.5467 77.2 57.936C75.92 60.5813 75.152 62.672 74.896 64.208C73.1893 67.1947 70.3733 70.0533 66.448 72.784C62.608 75.5147 58.4267 77.7333 53.904 79.44C49.3813 81.1467 45.4133 82 42 82C25.5307 82 13.7973 76.368 6.8 65.104C4.83733 61.9467 3.30133 58.6613 2.192 55.248C1.168 51.8347 0.656 48.5067 0.656 45.264C0.656 36.56 2.192 29.008 5.264 22.608C8.42133 16.1227 12.7733 11.088 18.32 7.504C21.648 5.54133 25.104 3.92 28.688 2.64C32.3573 1.27466 35.6 0.591995 38.416 0.591995ZM13.968 45.648C13.968 50.256 14.992 54.0533 17.04 57.04C19.1733 60.0267 22.416 63.2693 26.768 66.768C30.352 68.1333 32.784 69.0293 34.064 69.456C35.344 69.7973 36.7947 69.968 38.416 69.968C47.0347 69.968 53.904 67.6213 59.024 62.928C64.144 58.2347 66.704 51.792 66.704 43.6C66.704 37.1147 65.9787 31.9947 64.528 28.24C63.0773 24.4853 60.4747 21.1147 56.72 18.128C54.7573 16.5067 52.24 15.312 49.168 14.544C46.1813 13.776 42.9387 13.392 39.44 13.392C34.1493 13.392 29.584 14.9707 25.744 18.128C21.904 21.2 18.96 25.2107 16.912 30.16C14.9493 35.1093 13.968 40.272 13.968 45.648Z";
  const N_alphabet = "M53.72 10.064C53.72 7.58933 54.2747 5.456 55.384 3.66399C56.5787 1.78666 58.328 0.848 60.632 0.848C62.5947 0.848 64.344 1.232 65.88 2C67.416 2.768 68.184 4.04799 68.184 5.84C68.184 9.33866 68.0133 14.2453 67.672 20.56C67.3307 26.704 67.16 31.2693 67.16 34.256C67.16 38.9493 67.3307 45.2213 67.672 53.072C68.0133 60.5813 68.184 66.0853 68.184 69.584C68.184 72.4 68.1413 74.4907 68.056 75.856C68.056 77.2213 67.288 78.5867 65.752 79.952C64.3013 81.232 62.04 81.872 58.968 81.872C57.3467 81.872 55.9387 81.616 54.744 81.104C53.6347 80.5067 52.8667 79.8667 52.44 79.184C48.4293 74.32 42.584 66.0427 34.904 54.352C26.2853 41.296 19.2453 31.312 13.784 24.4C14.4667 30.544 14.808 38.0533 14.808 46.928C14.808 50.8533 14.7227 55.9733 14.552 62.288C14.4667 68.5173 14.296 72.6133 14.04 74.576C13.6987 77.0507 12.9307 78.9707 11.736 80.336C10.6267 81.616 8.83467 82.256 6.36 82.256C4.48267 82.256 3.07467 81.744 2.136 80.72C1.28267 79.6107 0.770667 77.7333 0.6 75.088C0.514667 71.5893 0.728 66.3413 1.24 59.344C1.32533 58.2347 1.45333 56.3147 1.624 53.584C1.79467 50.8533 1.88 48.4213 1.88 46.288C1.88 40.4 1.58133 33.6587 0.984 26.064C0.472 17.7013 0.216001 11.5147 0.216001 7.504C0.216001 5.456 0.941334 3.87733 2.392 2.768C3.928 1.65866 5.67733 1.104 7.64 1.104C9.34667 1.104 11.1387 1.53066 13.016 2.384C20.3547 11.6 30.296 25.3387 42.84 43.6L54.872 62.032C54.9573 60.6667 55 58.7467 55 56.272C55 51.92 54.9147 47.2267 54.744 42.192C54.5733 37.1573 54.4453 33.744 54.36 31.952C53.9333 23.6747 53.72 16.3787 53.72 10.064Z";
  const T_alphabet = "M0.408 6.376C0.408 2.70666 3.096 0.871994 8.472 0.871994C10.776 0.871994 15.1707 0.957329 21.656 1.128C28.824 1.46933 34.2427 1.64 37.912 1.64C40.8987 1.64 44.5253 1.46933 48.792 1.128C51.6933 0.957329 53.528 0.871994 54.296 0.871994C58.9893 1.04266 62.9573 1.896 66.2 3.432C67.1387 3.85867 67.9067 4.37066 68.504 4.96799C69.1013 5.56533 69.4 6.54666 69.4 7.91199C69.4 9.78933 68.8027 11.4107 67.608 12.776C66.4133 14.056 64.9627 14.696 63.256 14.696C61.3787 14.696 58.648 14.44 55.064 13.928C51.9067 13.3307 49.1333 13.032 46.744 13.032C44.44 13.032 42.6907 13.0747 41.496 13.16C41.24 15.976 41.112 22.7173 41.112 33.384C41.112 46.0987 41.496 58.984 42.264 72.04L42.52 75.752C42.52 79.2507 40.5147 81 36.504 81C33.3467 81 31.2133 80.2747 30.104 78.824C28.9947 77.288 28.44 74.984 28.44 71.912C28.44 65.8533 28.2693 58.3013 27.928 49.256C27.5867 41.7467 27.416 36.4133 27.416 33.256C27.416 31.1227 27.672 24.5947 28.184 13.672L13.208 13.8C8.42933 13.8 5.10133 13.3733 3.224 12.52C1.34667 11.5813 0.408 9.53333 0.408 6.376Z";
  const D_alphabet = "M21.52 0.848C33.1253 0.848 42.2987 2.46933 49.04 5.712C55.8667 8.86933 61.0293 12.4107 64.528 16.336C67.344 19.5787 69.648 23.3333 71.44 27.6C73.232 31.7813 74.128 36.816 74.128 42.704C74.128 47.056 73.1467 51.6213 71.184 56.4C69.2213 61.0933 66.6613 64.8907 63.504 67.792C60.176 70.9493 57.0187 73.5093 54.032 75.472C51.1307 77.4347 47.1627 79.056 42.128 80.336C37.1787 81.5307 30.864 82.128 23.184 82.128C17.3813 82.128 12.1333 81.488 7.44 80.208C2.74667 78.8427 0.4 76.5813 0.4 73.424C0.4 72.144 0.954667 71.1627 2.064 70.48C3.25867 69.712 4.53867 69.328 5.904 69.328C6.672 69.328 7.184 69.3707 7.44 69.456C8.03733 63.824 8.336 57.8507 8.336 51.536C8.336 44.4533 8.16533 38.608 7.824 34C7.48267 29.3067 7.01333 24.656 6.416 20.048C6.33067 19.4507 6.11733 17.7867 5.776 15.056C5.52 12.3253 5.392 9.552 5.392 6.736C5.392 4.944 6.288 3.45066 8.08 2.256C9.872 0.975998 11.7067 0.335999 13.584 0.335999C14.6933 0.335999 16.1867 0.421331 18.064 0.591995C19.6 0.762665 20.752 0.848 21.52 0.848ZM19.856 70.096C21.904 70.4373 24.592 70.608 27.92 70.608C33.552 70.608 38.8853 69.456 43.92 67.152C48.9547 64.7627 53.008 61.4773 56.08 57.296C59.152 53.0293 60.688 48.1227 60.688 42.576C60.688 36.7733 59.664 31.824 57.616 27.728C55.568 23.632 52.4107 20.2613 48.144 17.616C44.9867 15.6533 41.104 14.2453 36.496 13.392C31.888 12.4533 26.3413 11.984 19.856 11.984C19.856 14.032 19.984 16.592 20.24 19.664C20.24 20.688 20.3253 22.48 20.496 25.04C21.008 34.9387 21.264 42.9173 21.264 48.976C21.264 57.7653 20.7947 64.8053 19.856 70.096Z";
  const E_alphabet = "M54.696 64.592C56.3173 64.592 57.512 65.232 58.28 66.512C59.1333 67.7067 59.56 69.0293 59.56 70.48C59.56 72.272 59.2613 73.552 58.664 74.32C58.152 75.0027 57.128 75.728 55.592 76.496C52.008 78.2027 47.5707 79.568 42.28 80.592C36.9893 81.616 31.3147 82.128 25.256 82.128C17.6613 82.128 12.072 80.848 8.488 78.288C4.98933 75.728 2.81333 72.656 1.96 69.072C1.192 65.4027 0.808001 60.624 0.808001 54.736C0.808001 48.4213 1.064 42.2347 1.576 36.176C2.088 30.032 2.984 22.224 4.264 12.752C4.86133 8.656 6.48267 5.712 9.128 3.92C11.7733 2.04266 14.6747 1.104 17.832 1.104C20.4773 1.104 24.7867 1.01866 30.76 0.848L41.896 0.719994C46.504 0.719994 49.832 0.847994 51.88 1.104C54.44 1.61599 56.3173 2.21333 57.512 2.896C58.792 3.49333 59.432 4.56 59.432 6.09599C59.432 7.80266 58.8347 9.46666 57.64 11.088C56.5307 12.7093 54.824 13.52 52.52 13.52C49.8747 13.52 46.0773 13.3493 41.128 13.008C36.1787 12.6667 32.4667 12.496 29.992 12.496C27.8587 12.496 25.768 12.624 23.72 12.88C21.3307 13.0507 19.624 13.3493 18.6 13.776C17.576 14.2027 16.9787 14.928 16.808 15.952C15.6133 24.7413 15.016 31.2267 15.016 35.408C16.9787 35.664 18.8987 35.792 20.776 35.792C23.1653 35.792 25.7253 35.664 28.456 35.408C31.1867 35.152 32.936 34.9813 33.704 34.896C38.2267 34.4693 42.1093 34.256 45.352 34.256C47.2293 34.256 48.6373 34.5973 49.576 35.28C50.6 35.9627 51.112 36.9013 51.112 38.096C51.112 39.9733 50.6 41.424 49.576 42.448C48.6373 43.472 46.9307 44.24 44.456 44.752C41.4693 45.3493 37.7573 45.8187 33.32 46.16C28.968 46.5013 24.7013 46.672 20.52 46.672C19.0693 46.672 17.064 46.5867 14.504 46.416C14.248 51.6213 14.12 56.4427 14.12 60.88C14.12 66.9387 18.1307 69.968 26.152 69.968C30.4187 69.968 33.96 69.6693 36.776 69.072C39.592 68.4747 42.8347 67.6213 46.504 66.512C49.9173 65.232 52.648 64.592 54.696 64.592Z";
  const V_alphabet = "M13.384 3.56C16.5413 12.9467 20.1253 23.272 24.136 34.536C28.1467 45.7147 31.816 55.4 35.144 63.592C37.6187 55.656 41.032 46.1413 45.384 35.048C49.736 23.8693 53.7893 13.8 57.544 4.84C58.6533 2.19466 60.5307 0.871994 63.176 0.871994C65.6507 0.871994 67.528 1.384 68.808 2.408C70.088 3.34666 70.728 5.01066 70.728 7.39999C70.728 8.33866 70.6 9.14933 70.344 9.83199C70.088 10.5147 69.704 11.4107 69.192 12.52C66.5467 17.7253 63.9013 23.7413 61.256 30.568C58.6107 37.3093 55.368 45.8853 51.528 56.296C51.6987 55.8693 50.504 59.0693 47.944 65.896L43.72 76.904C43.208 78.2693 42.3547 79.336 41.16 80.104C40.0507 80.7867 38.7707 81.128 37.32 81.128C35.8693 81.128 34.248 80.7867 32.456 80.104C30.7493 79.336 29.512 78.568 28.744 77.8C25.8427 72.2533 22.1307 64.232 17.608 53.736C13.1707 43.24 9.33067 33.5547 6.088 24.68L4.168 19.432C2.888 15.848 1.94933 13.1173 1.352 11.24C0.754667 9.27733 0.456 7.69866 0.456 6.504C0.456 4.79733 1.39467 3.43199 3.272 2.408C5.23467 1.384 7.112 0.871994 8.904 0.871994C9.84267 0.871994 10.7387 1.08533 11.592 1.51199C12.4453 1.93866 13.0427 2.62133 13.384 3.56Z";
  const L_alphabet = "M7.744 0.719994C9.36533 0.719994 10.816 1.14666 12.096 2C13.4613 2.85333 14.272 4.34666 14.528 6.48C15.552 13.2213 16.192 19.9627 16.448 26.704C16.7893 33.36 16.96 40.912 16.96 49.36C16.96 52.944 16.6613 59.472 16.064 68.944C19.8187 69.2853 22.72 69.456 24.768 69.456C26.2187 69.456 29.504 69.2427 34.624 68.816C37.6107 68.3893 40.2133 68.176 42.432 68.176C44.48 68.176 46.3573 68.3893 48.064 68.816C49.7707 69.1573 51.52 69.7547 53.312 70.608C55.104 71.632 56 73.2107 56 75.344C56 77.0507 55.4453 78.5867 54.336 79.952C53.312 81.3173 52.0747 82 50.624 82C49.6 82 47.9787 81.8293 45.76 81.488C41.7493 80.8907 37.9093 80.592 34.24 80.592C33.0453 80.592 31.68 80.6773 30.144 80.848C28.6933 80.9333 27.6267 80.976 26.944 80.976C24.896 81.232 22.848 81.36 20.8 81.36C16.6187 81.36 12.864 81.1467 9.536 80.72C7.82933 80.5493 6.12267 79.9093 4.416 78.8C2.70933 77.6053 1.856 75.8987 1.856 73.68C1.856 72.4 2.02667 69.1147 2.368 63.824C2.96533 55.0347 3.264 48.336 3.264 43.728C3.264 40.144 3.09333 36.3893 2.752 32.464C2.41067 28.5387 2.19733 26.064 2.112 25.04C1.344 17.7867 0.96 11.8133 0.96 7.12C0.96 4.90133 1.472 3.28 2.496 2.256C3.60533 1.23199 5.35467 0.719994 7.744 0.719994Z";
  const P_alphabet = "M32.832 53.072C29.504 53.072 26.688 52.9867 24.384 52.816C22.1653 52.56 19.2213 52.176 15.552 51.664L15.424 65.104C15.3387 67.408 15.296 70.6933 15.296 74.96C15.296 77.1787 14.656 78.928 13.376 80.208C12.1813 81.4027 10.816 82 9.28 82C6.464 82 4.37333 81.6587 3.008 80.976C1.64267 80.208 0.96 78.8853 0.96 77.008C0.96 74.5333 1.17333 71.0347 1.6 66.512C2.53867 56.784 3.008 46.8 3.008 36.56C3.008 27.0027 2.70933 18 2.112 9.55199C2.19733 8.35733 2.79467 6.99199 3.904 5.45599C5.09867 3.91999 6.592 3.06666 8.384 2.896C10.3467 2.896 13.4613 2.55466 17.728 1.87199C22.1653 1.18933 25.536 0.848 27.84 0.848C34.8373 0.848 40.256 1.53067 44.096 2.896C48.0213 4.26133 51.9467 6.52266 55.872 9.68C60.1387 16.336 62.272 21.0293 62.272 23.76C62.272 29.4773 61.12 34.5547 58.816 38.992C56.512 43.4293 53.1413 46.8853 48.704 49.36C44.2667 51.8347 38.976 53.072 32.832 53.072ZM29.888 11.728C27.1573 11.728 24.768 11.8987 22.72 12.24C20.7573 12.496 18.368 12.9653 15.552 13.648C15.8933 21.4987 16.064 27.216 16.064 30.8C16.064 34.4693 15.936 37.5413 15.68 40.016C19.3493 40.784 22.2507 41.296 24.384 41.552C26.5173 41.7227 28.9067 41.808 31.552 41.808C37.8667 41.808 42.304 40.1867 44.864 36.944C47.5093 33.616 48.832 29.776 48.832 25.424C48.832 24.144 48.448 22.5653 47.68 20.688C46.912 18.8107 46.2293 17.5733 45.632 16.976C43.328 14.928 41.0667 13.5627 38.848 12.88C36.7147 12.112 33.728 11.728 29.888 11.728Z";


  useEffect(() => {
    // Matter.js, pathseg, poly-decomp이 로드된 후 실행
    const Engine = Matter.Engine;
    const Runner = Matter.Runner;
    const Render = Matter.Render;
    const Bodies = Matter.Bodies;
    const World = Matter.World;
    const Body = Matter.Body;
    const Svg = Matter.Svg;

    const engine = Engine.create();
    const container = canvasRef.current;

    const renderer = Matter.Render.create({
      element: canvasRef.current,
      engine,
      options: {
        width: container.offsetWidth,
        height: container.offsetHeight,
        wireframes: false,
        background: "#000"
      }
    });

    const walls = [
      // 왼쪽 벽
      /**
       * 위치: x = 0 - 50, y = 0 - 50
       * 크기: 너비 1px, 높이 container.offsetHeight * 2 - 50
       */
      Bodies.rectangle(0, container.offsetHeight / 2, 25, container.offsetHeight, {
        isStatic: true
      }),

      // 오른쪽 벽
      Bodies.rectangle(
        container.offsetWidth,
        container.offsetHeight / 2,
        25,
        { isStatic: true }
      ),
      // 아래 벽
      Bodies.rectangle(
        container.offsetWidth / 2,
        container.offsetHeight,
        container.offsetWidth,
        10,
        { isStatic: true }
      )
    ];

    const physics = {
      restitution: 0.7,
      friction: 0.4
    };

    const createCircle = (width, color, x, y) => {
      const outerCircle = Bodies.circle(x, y, width, {
        ...physics,
        render: {
          fillStyle: color
        }
      });
      const innerCircle = Bodies.circle(x, y, width / 2.5, {
        ...physics,
        render: {
          fillStyle: "#000"
        }
      });
      return Body.create({
        parts: [outerCircle, innerCircle]
      });
    };
    const createSvgElement = (path, color, scale, x, y, angle) => {
      const pathElement = document.createElementNS("http://www.w3.org/2000/svg", "path");
      pathElement.setAttribute("d", path);
      const vertices = Svg.pathToVertices(pathElement, 3);
      vertices.forEach((vertical) => {
        const i = vertices.findIndex(
          (v) => v.x === vertical.x && v.y === vertical.y
        );
        if (i !== -1) {
          vertices.splice(i, 1);
        }
      });
      const body = Bodies.fromVertices(
        x,
        y,
        vertices,
        {
          ...physics,
          render: {
            fillStyle: color,
            strokeStyle: color,
            lineWidth: "1px"
          }
        },
        true
      );

      Body.scale(body, 2, 2);
      Body.setAngle(body, angle);
      return body;
    };

    const elements = [
      //                  path,     color,   scale, x, y, angle
      createSvgElement(F_alphabet, "#583d91", 1, 250, -400, 30), // f        O
      createSvgElement(R_alphabet, "#eb5c48", 400, 450, -400, 50), // r         O
      createSvgElement(O_alphabet, "#9a3d90", 500, 400, -200, 10), // o
      // createSvgElement(N_alphabet, "#583d91", 1000, 700, -400, 50), // n
      // createSvgElement(T_alphabet, "#eb5c48", 1150, -200), // t
      // createSvgElement(E_alphabet, "#583d91", 900, 1460, -400, 200), // e         O
      // createSvgElement(N_alphabet, "#583d91", 700, 1300, -700, 300), // n         O
      // createSvgElement(D_alphabet, "#fab71a", 800, 1600, -700, 100), // d
      // createSvgElement(D_alphabet, "#fab71a", 100, -900), // d
      // createSvgElement(E_alphabet, "#eb5c48", 500, 250, -900, 250), // e
      // createSvgElement(V_alphabet, "#fab71a", 600, -900), // v
      // createSvgElement(E_alphabet, "#eb5c48", 12, 1500, -900, 100), // l
      // createSvgElement(L_alphabet, "#eb5c48", 230, 1500, -900, 100), // o
      // createSvgElement(O_alphabet, "#eb5c48", 440, 1500, -900, 100), // p
      // createSvgElement(P_alphabet, "#eb5c48", 55, 1500, -900, 100), // e
      // createSvgElement(E_alphabet, "#eb5c48", 660, 1500, -900, 100), // r
      // createSvgElement(R_alphabet, "#eb5c48", 880, 1500, -900, 100), // r
    ];

    const mouseConstraint = Matter.MouseConstraint.create(engine, {
      element: container,
      constraint: {
        stiffness: 0.2,
        render: {
          visible: false
        }
      }
    });
    const runner = Matter.Runner.create();
    Matter.World.add(engine.world, [...walls, mouseConstraint, ...elements]);
    Matter.Runner.run(runner, engine); // 엔진을 구동합니다.
    Render.run(renderer); // 렌더를 진행합니다.

    return () => {
      Render.stop(renderer);
      World.clear(engine.world, false);
      Engine.clear(engine);
      // render.canvas.remove();
    };
  }, [canvasRef]);
  return <>
  <div id="container" ref={canvasRef} className={container} style={{ width: "60vw", height: "80vh" }}></div>
  </>;
};

export default MatterCanvas;
